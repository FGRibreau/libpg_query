diff --git a/src/backend/parser/scan.l b/src/backend/parser/scan.l
index e1cae859e8..cf4cff3788 100644
--- a/src/backend/parser/scan.l
+++ b/src/backend/parser/scan.l
@@ -481,6 +481,7 @@ other			.
 					yyless(1);
 					BEGIN(INITIAL);
 					yylval->str = litbufdup(yyscanner);
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return BCONST;
 				}
 <xh>{xhinside}	|
@@ -510,6 +511,7 @@ other			.
 					yyless(1);
 					BEGIN(INITIAL);
 					yylval->str = litbufdup(yyscanner);
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return XCONST;
 				}
 <xh><<EOF>>		{ yyerror("unterminated hexadecimal string literal"); }
@@ -536,6 +538,7 @@ other			.
 					{
 						/* If NCHAR isn't a keyword, just return "n" */
 						yylval->str = pstrdup("n");
+						yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 						return IDENT;
 					}
 				}
@@ -581,6 +584,7 @@ other			.
 									   yyextra->literallen,
 									   false);
 					yylval->str = litbufdup(yyscanner);
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return SCONST;
 				}
 <xus>{quotestop} |
@@ -600,6 +604,7 @@ other			.
 					yyless(0);
 					BEGIN(INITIAL);
 					yylval->str = litbuf_udeescape('\\', yyscanner);
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return SCONST;
 				}
 <xusend>{xustop2} {
@@ -613,6 +618,7 @@ other			.
 					}
 					yylval->str = litbuf_udeescape(yytext[yyleng - 2],
 												   yyscanner);
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return SCONST;
 				}
 <xq,xe,xus>{xqdouble} {
@@ -722,6 +728,7 @@ other			.
 						yyextra->dolqstart = NULL;
 						BEGIN(INITIAL);
 						yylval->str = litbufdup(yyscanner);
+						yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 						return SCONST;
 					}
 					else
@@ -767,6 +774,7 @@ other			.
 					if (yyextra->literallen >= NAMEDATALEN)
 						truncate_identifier(ident, yyextra->literallen, true);
 					yylval->str = ident;
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return IDENT;
 				}
 <xui>{dquote} {
@@ -794,6 +802,7 @@ other			.
 					if (identlen >= NAMEDATALEN)
 						truncate_identifier(ident, identlen, true);
 					yylval->str = ident;
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return IDENT;
 				}
 <xuiend>{xustop2}	{
@@ -815,6 +824,7 @@ other			.
 					if (identlen >= NAMEDATALEN)
 						truncate_identifier(ident, identlen, true);
 					yylval->str = ident;
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return IDENT;
 				}
 <xd,xui>{xddouble}	{
@@ -834,6 +844,7 @@ other			.
 					/* and treat it as {identifier} */
 					ident = downcase_truncate_identifier(yytext, yyleng, true);
 					yylval->str = ident;
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return IDENT;
 				}
 
@@ -1057,6 +1068,7 @@ other			.
 					 */
 					ident = downcase_truncate_identifier(yytext, yyleng, true);
 					yylval->str = ident;
+					yyextra->yyllocend = yytext - yyextra->scanbuf + yyleng;
 					return IDENT;
 				}
 
diff --git a/src/include/parser/scanner.h b/src/include/parser/scanner.h
index 731a2bd264..2effd8bdd8 100644
--- a/src/include/parser/scanner.h
+++ b/src/include/parser/scanner.h
@@ -108,6 +108,8 @@ typedef struct core_yy_extra_type
 	/* state variables for literal-lexing warnings */
 	bool		warn_on_first_escape;
 	bool		saw_non_ascii;
+
+	int yyllocend;
 } core_yy_extra_type;
 
 /*
